{"version":3,"sources":["services/service.ts"],"names":["TodoService","TodoService.constructor","TodoService.getList","TodoService.addTask","TodoService.removeTask","TodoService.reloadList","TodoService.updateStatus","TodoService.updateStatus2"],"mappings":"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","file":"services/service.js","sourcesContent":["import {Injectable} from \"angular2/core\";\nimport {Task} from \"../models/task\";\nimport {Http, Headers, HTTP_PROVIDERS} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/map';\nimport {Ng2NotifyService} from 'ng2-notify/notify';\n\nvar apiUrl = 'http://todo-node-api.dimaslz.io';\ndeclare var io: any;\n\n@Injectable()\nexport class TodoService {\n    todos$: Observable<Array<Task>>;\n    update: Observable<boolean>;\n    private _todosObserver: any;\n    private _updateObserver: any;\n    private _dataStore : {\n        todos: Array<Task>\n    };\n    public socket: any;\n    \n    public todos = [];\n    \n    constructor(private http: Http, private notification: Ng2NotifyService) {\n        this.socket = io('http://localhost:3000');\n        \n        this.todos$ = new Observable(observer => this._todosObserver = observer).share();\n        this.update = new Observable(observer => this._updateObserver = observer).share();\n        \n        this._dataStore = { todos: [] };\n    };\n    \n    public getList(status = '') {\n        this.http.get(apiUrl+'/api/list', {search: 'status='+status})\n        .map((response) => {\n            // return response.json().data;\n            var data: Array<Task> = [];\n            response.json().data.forEach(function(value, index) {\n                data.push(new Task(value._id, value.name, value.description, value.status, value.date));\n            });\n            \n            return data;\n        })\n        .subscribe((data) => {\n            this._dataStore.todos = data;\n            \n            this._todosObserver.next(this._dataStore.todos);\n        }, error => console.error('Could not load todos'));\n    }\n    \n    addTask(task:Task) {\n        var str = '';\n        Object.getOwnPropertyNames(task).forEach(function(val, idx, array) {\n            str += val + '=' + task[val]+'&';\n        });\n        let creds = JSON.stringify(str);\n        \n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        this.http.post(apiUrl+'/api/add', creds, { headers: headers })\n            .map(response => response.json()).subscribe(data => {\n                var data = data.result;\n                var objTask = new Task(data._id, data.name, data.description, data.status, data.date);\n                this._todosObserver.next(this._dataStore.todos);\n                this.socket.emit(\"reloadList\", {type: 'success', message: 'Task added'});\n                // this.notification.show('success', 'Task Added');\n                // this.reloadList();\n        }, error => console.log('Could not create todo.'));\n    }\n    \n    removeTask(task) {\n        var headers = new Headers();\n        this.http.delete(apiUrl+'/api/'+task.id+'/delete')\n            .map(response => response.json()).subscribe(data => {\n                // this.notification.show('success', 'Task Removed');\n                // this.reloadList();\n                this.socket.emit(\"reloadList\", {type: 'success', message: 'Task deleted'});\n        }, error => console.log('Could not create todo.'));\n    }\n    \n    reloadList() {\n        this._updateObserver.next(true);\n    }\n    \n    updateStatus(task, type) {\n        var str = '';\n        var currentStatus = task.status;\n        task.status = type;\n        Object.getOwnPropertyNames(task).forEach(function(val, idx, array) {\n            str += val + '=' + task[val]+'&';\n        });\n        let creds = JSON.stringify(str);\n        \n        var headers = new Headers();\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n        this.http.put(apiUrl+'/api/'+task.id+'/update/status', creds, { headers: headers })\n            .map(response => response.json()).subscribe(data => {\n                // this.reloadList();\n                // this.notification.show('success', 'Task '+type);\n                this.socket.emit(\"reloadList\", {type: 'success', message: 'Task'});\n        }, error => console.log('Could not create todo.'));\n    }\n    \n    updateStatus2(task, type) {\n        return new Promise(\n            function(resolve, reject) {\n                var str = '';\n                var currentStatus = task.status;\n                task.status = type;\n                Object.getOwnPropertyNames(task).forEach(function(val, idx, array) {\n                    str += val + '=' + task[val]+'&';\n                });\n                let creds = JSON.stringify(str);\n                \n                var headers = new Headers();\n                headers.append('Content-Type', 'application/x-www-form-urlencoded');\n                this.http.put(apiUrl+'/api/'+task.id+'/update/status', creds, { headers: headers })\n                    .map(response => response.json()).subscribe(data => {\n                        resolve(data);\n                }, error => console.log('Could not create todo.'));\n            }\n        );\n    }\n}"],"sourceRoot":"/source/"}