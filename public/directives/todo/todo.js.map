{"version":3,"sources":["directives/todo/todo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAoE,eAAe,CAAC,CAAA;AACpF,qBAAuB,aAAa,CAAC,CAAA;AACrC,wBAA0B,wBAAwB,CAAC,CAAA;AACnD,qBAAmB,mBAAmB,CAAC,CAAA;AACvC,qBAAiD,eAAe,CAAC,CAAA;AACjE,uBAA0C,mBAAmB,CAAC,CAAA;AAC9D,uBAA8E,iBAAiB,CAAC,CAAA;AAahG;IAgBI,cACW,WAAwB,EACxB,MAAwB,EACxB,YAA6B,EAC7B,MAAkB;QApBjC,iBAuCC;QAtBc,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAkB;QACxB,iBAAY,GAAZ,YAAY,CAAiB;QAC7B,WAAM,GAAN,MAAM,CAAY;QAnBrB,cAAS,GAAQ,IAAI,WAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;QACtD,aAAQ,GAAG,EAAE,CAAC;QACd,mBAAc,GAAG,EAAE,CAAC;QAmBxB,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,YAAY;YACtC,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE;gBACtC,OAAO,EAAE,YAAY,CAAC,OAAO;aAChC,CAAC,CAAC;YAEH,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAtBD,uBAAQ,GAAR;QAAA,iBAMC;QALG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,aAAa;YAC3C,KAAI,CAAC,cAAc,GAAG,aAAa,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACvE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAC;;IAqBM,sBAAO,GAAd;QACI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,WAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;IAC1D,CAAC;IAhDL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM;YAChB,SAAS,EAAE,CAAC,yBAAgB,EAAE,qBAAW,EAAE,WAAI,EAAE,oBAAa,EAAE,qBAAc,CAAC;SAClF,CAAC;QAED,WAAI,CAAC;YACF,WAAW,EAAE,iCAAiC;YAC9C,UAAU,EAAE,CAAC,eAAQ,EAAE,kBAAS,EAAE,0BAAiB,EAAE,mBAAU,CAAC;SACnE,CAAC;;YAAA;IAyCF,WAAC;AAAD,CAvCA,AAuCC,IAAA;AAvCY,YAAI,OAuChB,CAAA","file":"directives/todo/todo.js","sourcesContent":["import {Component, View, OnInit, Inject, forwardRef, Injector} from \"angular2/core\";\nimport {TodoList} from \"./list/list\";\nimport {TodoService} from \"../../services/service\";\nimport {Task} from \"../../models/task\";\nimport {Http, HTTP_BINDINGS,HTTP_PROVIDERS} from 'angular2/http';\nimport {Ng2Notify, Ng2NotifyService} from 'ng2-notify/notify';\nimport {ROUTER_DIRECTIVES, RouteParams, RouteConfig, Router, RouterLink} from 'angular2/router';\n\ndeclare var io: any;\n@Component({\n    selector: 'todo',\n    providers: [Ng2NotifyService, TodoService, Http, HTTP_BINDINGS, HTTP_PROVIDERS]\n})\n\n@View({\n    templateUrl: './directives/todo/todo.tpl.html',\n    directives: [TodoList, Ng2Notify, ROUTER_DIRECTIVES, RouterLink]\n})\n\nexport class Todo implements OnInit {\n    private taskInput:Task = new Task(\"\", \"\", \"\", \"\", new Date());\n    private typeList = '';\n    private componentTodos = [];\n    public  socket: any;\n    private messages: Array<String>;\n    private ngService;\n    \n    ngOnInit() {\n        this.todoService.todos$.subscribe(uploadedTodos => {\n            this.componentTodos = uploadedTodos;\n        });\n        this.typeList = this.params.get('list') ? this.params.get('list') : '';\n        this.todoService.getList(this.typeList);\n    }\n    \n    constructor(\n        public todoService: TodoService, \n        public notify: Ng2NotifyService,\n        public notification:Ng2NotifyService,\n        public params:RouteParams) {\n        \n        this.socket = io();\n        this.socket.on(\"reloadList\", (notification) => {\n            this.notification.show(notification.type, {\n                message: notification.message\n            });\n            \n            this.todoService.getList(this.typeList);\n        });\n    };\n\n    /**\n     * addItem\n     */\n    public addItem() {\n        this.todoService.addTask(this.taskInput);\n        this.taskInput = new Task(\"\", \"\", \"\", \"\", new Date());\n    }\n}"],"sourceRoot":"/source/"}