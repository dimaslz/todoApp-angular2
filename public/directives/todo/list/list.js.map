{"version":3,"sources":["directives/todo/list/list.ts"],"names":["TodoList","TodoList.constructor","TodoList.updateStatus","TodoList.delete"],"mappings":";;;;;;;;;AACA,qBAAqC,eAAe,CAAC,CAAA;AACrD,wBAA0B,2BAA2B,CAAC,CAAA;AAKtD;IAWIA,kBAAoBA,WAAwBA;QAXhDC,iBA2BCA;QAhBuBA,gBAAWA,GAAXA,WAAWA,CAAaA;QACxCA,IAAIA,CAACA,WAAWA,CAACA,MAAMA,CAACA,SAASA,CAACA,UAAAA,KAAKA;YACnCA,KAAIA,CAACA,WAAWA,CAACA,OAAOA,CAACA,KAAIA,CAACA,QAAQA,CAACA,CAACA;QAC5CA,CAACA,CAACA,CAACA;QAEHA,IAAIA,CAACA,MAAMA,GAAGA,EAAEA,CAACA,2BAA2BA,CAACA,CAACA;IAClDA,CAACA;;IAEOD,+BAAYA,GAApBA,UAAqBA,IAAIA,EAAEA,MAAMA;QAC7BE,IAAIA,CAACA,WAAWA,CAACA,YAAYA,CAACA,IAAIA,EAAEA,MAAMA,CAACA,CAACA;IAChDA,CAACA;IAEOF,yBAAMA,GAAdA,UAAeA,IAAIA;QACfG,IAAIA,CAACA,WAAWA,CAACA,UAAUA,CAACA,IAAIA,CAACA,CAACA;QAClCA,IAAIA,CAACA,MAAMA,CAACA,IAAIA,CAACA,YAAYA,EAAEA,EAACA,IAAIA,EAAEA,SAASA,EAAEA,OAAOA,EAAEA,cAAcA,EAACA,CAACA,CAACA;IAC/EA,CAACA;IApBDH;QAACA,YAAKA,EAAEA;;OAACA,8BAAQA,UAACA;IAClBA;QAACA,YAAKA,EAAEA;;OAACA,2BAAKA,UAACA;IAPnBA;QAACA,gBAASA,CAACA;YACPA,QAAQA,EAAEA,WAAWA;YACrBA,WAAWA,EAAEA,sCAAsCA;SACtDA,CAACA;;iBAwBDA;IAADA,eAACA;AAADA,CA3BA,AA2BCA,IAAA;AAtBY,gBAAQ,WAsBpB,CAAA","file":"directives/todo/list/list.js","sourcesContent":["import {bootstrap} from \"angular2/platform/browser\";\nimport {Component, View, Input} from \"angular2/core\";\nimport {TodoService} from '../../../services/service';\n// import {StatusPipe} from '../../..//pipes/status';\n\ndeclare var io: any;\n\n@Component({\n    selector: 'todo-list',\n    templateUrl: './directives/todo/list/list.tpl.html'\n})\n\nexport class TodoList{\n    @Input() typeList;\n    @Input() tasks;\n    public componentTodos;\n    public socket;\n    \n    constructor (public todoService: TodoService) {\n        this.todoService.update.subscribe(value => {\n            this.todoService.getList(this.typeList);\n        });\n        \n        this.socket = io('http://192.168.1.128:3000');\n    };\n    \n    private updateStatus(item, status) {\n        this.todoService.updateStatus(item, status);\n    }\n    \n    private delete(item) {\n        this.todoService.removeTask(item);\n        this.socket.emit(\"reloadList\", {type: 'success', message: 'Task deleted'});\n    }\n}"],"sourceRoot":"/source/"}